{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/david/dev/tabs-treeview/src/CustomNode.tsx\";\n\nimport React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\nimport { useDragOver } from \"@minoru/react-dnd-treeview\";\nimport { TypeIcon } from \"./TypeIcon\";\nimport { makeStyles } from '@mui/styles';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      alignItems: \"center\",\n      display: \"grid\",\n      gridTemplateColumns: \"auto auto 1fr auto\",\n      height: 32,\n      paddingInlineEnd: 8\n    },\n    expandIconWrapper: {\n      alignItems: \"center\",\n      fontSize: 0,\n      cursor: \"pointer\",\n      display: \"flex\",\n      height: 24,\n      justifyContent: \"center\",\n      width: 24,\n      transition: \"transform linear 0.1s\",\n      transform: \"rotate(0deg)\"\n    },\n    isOpen: {\n      transform: \"rotate(90deg)\"\n    },\n    labelGridItem: {\n      paddingInlineStart: 8\n    }\n  };\n});\nexport var CustomNode = function CustomNode(props) {\n  var classes = useStyles();\n  var _props$node = props.node,\n      id = _props$node.id,\n      droppable = _props$node.droppable,\n      data = _props$node.data;\n  var indent = props.depth * 24;\n\n  var handleToggle = function handleToggle(e) {\n    e.stopPropagation();\n    props.onToggle(props.node.id);\n  };\n\n  var dragOverProps = useDragOver(id, props.isOpen, props.onToggle);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: \"tree-node \".concat(classes.root),\n    style: {\n      paddingInlineStart: indent\n    }\n  }, dragOverProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.expandIconWrapper, \" \").concat(props.isOpen ? classes.isOpen : \"\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, props.node.droppable && /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleToggle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ArrowRightIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TypeIcon, {\n    droppable: droppable,\n    fileType: data === null || data === void 0 ? void 0 : data.fileType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.labelGridItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, props.node.text)));\n};","map":{"version":3,"sources":["/home/david/dev/tabs-treeview/src/CustomNode.tsx"],"names":["React","Typography","ArrowRightIcon","useDragOver","TypeIcon","makeStyles","useStyles","theme","root","alignItems","display","gridTemplateColumns","height","paddingInlineEnd","expandIconWrapper","fontSize","cursor","justifyContent","width","transition","transform","isOpen","labelGridItem","paddingInlineStart","CustomNode","props","classes","node","id","droppable","data","indent","depth","handleToggle","e","stopPropagation","onToggle","dragOverProps","fileType","text"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\nimport { NodeModel, useDragOver } from \"@minoru/react-dnd-treeview\";\nimport { CustomData } from \"./types\";\nimport { TypeIcon } from \"./TypeIcon\";\nimport { makeStyles } from '@mui/styles';\nimport { Theme } from '@mui/material';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    alignItems: \"center\",\n    display: \"grid\",\n    gridTemplateColumns: \"auto auto 1fr auto\",\n    height: 32,\n    paddingInlineEnd: 8,\n  },  \n  expandIconWrapper: {\n    alignItems: \"center\",\n    fontSize: 0,\n    cursor: \"pointer\",\n    display: \"flex\",\n    height: 24,\n    justifyContent: \"center\",\n    width: 24,\n    transition: \"transform linear 0.1s\",\n    transform: \"rotate(0deg)\",\n  },\n  isOpen: {\n      transform: \"rotate(90deg)\",\n  },  \n  labelGridItem: {\n    paddingInlineStart: 8,\n  }\n  \n}));\n\ntype Props = {\n  node: NodeModel<CustomData>;\n  depth: number;\n  isOpen: boolean;\n  onToggle: (id: NodeModel[\"id\"]) => void;\n};\n\nexport const CustomNode: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  const { id, droppable, data } = props.node;\n  const indent = props.depth * 24;\n\n  const handleToggle = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    props.onToggle(props.node.id);\n  };\n\n  const dragOverProps = useDragOver(id, props.isOpen, props.onToggle);\n\n  return (\n    <div\n      className={`tree-node ${classes.root}`}\n      style={{ paddingInlineStart: indent }}\n      {...dragOverProps}\n    >\n      <div className={`${classes.expandIconWrapper} ${props.isOpen ? classes.isOpen : \"\"}`}>\n        {props.node.droppable && (\n          <div onClick={handleToggle}>\n            <ArrowRightIcon />\n          </div>\n        )}\n      </div>\n      <div>\n        <TypeIcon droppable={droppable} fileType={data?.fileType} />\n      </div>\n      <div className={classes.labelGridItem}>\n        <Typography variant=\"body2\">\n          {props.node.text}\n        </Typography>\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}