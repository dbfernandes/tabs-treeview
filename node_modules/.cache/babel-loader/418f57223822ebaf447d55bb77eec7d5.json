{"ast":null,"code":"import _slicedToArray from \"/home/david/dev/tabs-treeview/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/david/dev/tabs-treeview/src/TreeView.tsx\";\nimport React, { useState } from \"react\";\nimport { Tree } from \"@minoru/react-dnd-treeview\";\nimport { CustomNode } from \"./CustomNode\";\nimport { CustomDragPreview } from \"./CustomDragPreview\";\nimport { makeStyles } from \"@mui/styles\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    app: {\n      height: \"100%\",\n      \"& ul\": {\n        listStyle: \"none\"\n      },\n      \"& *\": {\n        margin: 0,\n        padding: 0\n      }\n    },\n    treeRoot: {\n      height: \"100%\"\n    },\n    draggingSource: {\n      opacity: \".3\"\n    },\n    dropTarget: {\n      backgroundColor: \"#e8f0fe\"\n    }\n  };\n});\n\nfunction TreeView() {\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _useState = useState(SampleData),\n      _useState2 = _slicedToArray(_useState, 2),\n      treeData = _useState2[0],\n      setTreeData = _useState2[1];\n\n  var handleDrop = function handleDrop(newTree) {\n    return setTreeData(newTree);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.app,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tree, {\n    tree: treeData,\n    rootId: 0,\n    render: function render(node, _ref) {\n      var depth = _ref.depth,\n          isOpen = _ref.isOpen,\n          onToggle = _ref.onToggle;\n      return /*#__PURE__*/React.createElement(CustomNode, {\n        node: node,\n        depth: depth,\n        isOpen: isOpen,\n        onToggle: onToggle,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      });\n    },\n    dragPreviewRender: function dragPreviewRender(monitorProps) {\n      return /*#__PURE__*/React.createElement(CustomDragPreview, {\n        monitorProps: monitorProps,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 14\n        }\n      });\n    },\n    onDrop: handleDrop,\n    classes: {\n      root: classes.treeRoot,\n      draggingSource: classes.draggingSource,\n      dropTarget: classes.dropTarget\n    },\n    initialOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TreeView;","map":{"version":3,"sources":["/home/david/dev/tabs-treeview/src/TreeView.tsx"],"names":["React","useState","Tree","CustomNode","CustomDragPreview","makeStyles","useStyles","theme","app","height","listStyle","margin","padding","treeRoot","draggingSource","opacity","dropTarget","backgroundColor","TreeView","classes","SampleData","treeData","setTreeData","handleDrop","newTree","node","depth","isOpen","onToggle","monitorProps","root"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,IADF,QAIO,4BAJP;AAMA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,UAAT,QAA2B,aAA3B;AAMA,IAAMC,SAAS,GAAGD,UAAU,CAAC,UAACE,KAAD;AAAA,SAAmB;AAC9CC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAE,MADL;AAEH,cAAQ;AACNC,QAAAA,SAAS,EAAE;AADL,OAFL;AAKH,aAAO;AACLC,QAAAA,MAAM,EAAE,CADH;AAELC,QAAAA,OAAO,EAAE;AAFJ;AALJ,KADyC;AAW9CC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAE;AADA,KAXoC;AAc9CK,IAAAA,cAAc,EAAE;AACdC,MAAAA,OAAO,EAAE;AADK,KAd8B;AAiB9CC,IAAAA,UAAU,EAAE;AACVC,MAAAA,eAAe,EAAE;AADP;AAjBkC,GAAnB;AAAA,CAAD,CAA5B;;AAsBA,SAASC,QAAT,GAAoB;AAAA;;AAClB,MAAMC,OAAO,GAAGb,SAAS,EAAzB;;AACA,kBAAgCL,QAAQ,CAAcmB,UAAd,CAAxC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD;AAAA,WAA0BF,WAAW,CAACE,OAAD,CAArC;AAAA,GAAnB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEL,OAAO,CAACX,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEa,QADR;AAEE,IAAA,MAAM,EAAE,CAFV;AAGE,IAAA,MAAM,EAAE,gBAACI,IAAD;AAAA,UAAgCC,KAAhC,QAAgCA,KAAhC;AAAA,UAAuCC,MAAvC,QAAuCA,MAAvC;AAAA,UAA+CC,QAA/C,QAA+CA,QAA/C;AAAA,0BACN,oBAAC,UAAD;AACE,QAAA,IAAI,EAAEH,IADR;AAEE,QAAA,KAAK,EAAEC,KAFT;AAGE,QAAA,MAAM,EAAEC,MAHV;AAIE,QAAA,QAAQ,EAAEC,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADM;AAAA,KAHV;AAWE,IAAA,iBAAiB,EAAE,2BACjBC,YADiB;AAAA,0BAEd,oBAAC,iBAAD;AAAmB,QAAA,YAAY,EAAEA,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFc;AAAA,KAXrB;AAcE,IAAA,MAAM,EAAEN,UAdV;AAeE,IAAA,OAAO,EAAE;AACPO,MAAAA,IAAI,EAAEX,OAAO,CAACN,QADP;AAEPC,MAAAA,cAAc,EAAEK,OAAO,CAACL,cAFjB;AAGPE,MAAAA,UAAU,EAAEG,OAAO,CAACH;AAHb,KAfX;AAoBE,IAAA,WAAW,EAAE,IApBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AA0BD;;AAED,eAAeE,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Tree,\n  NodeModel,\n  DragLayerMonitorProps,\n} from \"@minoru/react-dnd-treeview\";\nimport { CustomData } from \"./types\";\nimport { CustomNode } from \"./CustomNode\";\nimport { CustomDragPreview } from \"./CustomDragPreview\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Theme } from \"@mui/material\";\nimport SampleData1 from \"./sample_data1.json\";\nimport SampleData2 from \"./sample_data2.json\";\nimport SampleData3 from \"./sample_data3.json\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  app: {\n    height: \"100%\",\n    \"& ul\": {\n      listStyle: \"none\",\n    },\n    \"& *\": {\n      margin: 0,\n      padding: 0,\n    },\n  },\n  treeRoot: {\n    height: \"100%\",\n  },\n  draggingSource: {\n    opacity: \".3\",\n  },\n  dropTarget: {\n    backgroundColor: \"#e8f0fe\",\n  },\n}));\n\nfunction TreeView() {\n  const classes = useStyles();\n  const [treeData, setTreeData] = useState<NodeModel[]>(SampleData);\n  const handleDrop = (newTree: NodeModel[]) => setTreeData(newTree);\n\n  return (\n    <div className={classes.app}>\n      <Tree\n        tree={treeData}\n        rootId={0}\n        render={(node: NodeModel<CustomData>, { depth, isOpen, onToggle }) => (\n          <CustomNode\n            node={node}\n            depth={depth}\n            isOpen={isOpen}\n            onToggle={onToggle}\n          />\n        )}\n        dragPreviewRender={(\n          monitorProps: DragLayerMonitorProps<CustomData>\n        ) => <CustomDragPreview monitorProps={monitorProps} />}\n        onDrop={handleDrop}\n        classes={{\n          root: classes.treeRoot,\n          draggingSource: classes.draggingSource,\n          dropTarget: classes.dropTarget,\n        }}\n        initialOpen={true}\n      />\n    </div>\n  );\n}\n\nexport default TreeView;\n"]},"metadata":{},"sourceType":"module"}